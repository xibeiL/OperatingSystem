栈内存:栈内存首先是一片内存区域，存储的都是局部变量，凡是定义在方法中的都是局部变量（方法外的是全局变量），
for循环内部定义的也是局部变量，是先加载函数才能进行局部变量的定义，所以方法先进栈，然后再定义变量，变量有自己的作用域，
一旦离开作用域，变量就会被释放。
栈内存的更新速度很快，因为局部变量的生命周期都很短。

堆内存:存储的是数组和对象（其实数组就是对象），凡是new建立的都是在堆中，堆中存放的都是实体（对象），
实体用于封装数据，而且是封装多个（实体的多个属性），
如果一个数据消失，这个实体也没有消失，还可以用，所以堆是不会随时释放的，
但是栈不一样，栈里存放的都是单个变量，变量被释放了，那就没有了。
堆里的实体虽然不会被释放，但是会被当成垃圾，Java有垃圾回收机制不定时的收取。



一.堆栈空间分配区别：

1.栈（操作系统）：由操作系统自动分配释放 ，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈；
2.堆（操作系统）： 一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回收，分配方式倒是类似于链表。
二.堆栈缓存方式区别：

1.栈使用的是一级缓存， 他们通常都是被调用时处于存储空间中，调用完毕立即释放；
2.堆是存放在二级缓存中，生命周期由虚拟机的垃圾回收算法来决定（并不是一旦成为孤儿对象就能被回收）。
所以调用这些对象的速度要相对来得低一些。
三.堆栈数据结构区别：

堆（数据结构）：堆可以被看成是一棵树，如：堆排序；堆是一种特殊的树形数据结构，每个结点都有一个值。
通常我们所说的堆的数据结构，是指二叉堆。堆的特点是根结点的值最小（或最大），且根结点的两个子树也是一个堆
堆分为大根堆,小根堆,大根堆就是树的根结点大于叶子结点.
栈（数据结构）：一种先进后出的数据结构。



1.管理方式不同
堆是由程序员通过 调用系统库函数来管理内存，所以管理不力 就会出现常说的内存泄漏
栈是由计算机系统分配内存 而且系统有专门的寄存器存储栈指针。
2.生长方式不同
堆是向高地址扩展 也就是常说的向上生长。是不连续的内存区域。
栈是向低地址扩展 也就是常说的向下生长。 是连续的内存区域。
（我 本人是这么理解的。因为堆是人为分配地址 所以分配的地址大小往往比实际需要的内存大，所以是不连续的内存区域。
而对于栈而言 ，系统有分配专门的寄存器存放栈地址，压栈出栈由专门的指令（先进后出FILO）执行，所以是连续的内存区域。如果理解不对，还望指出。）
3.空间大小不同
堆的大小 可以高达 4G 在32位Linux里系统有效的虚拟内存也有3.2G
栈的大小 一般是 1M ~10M 不等（和堆相差很多）。
4.内存速率不同
栈的内存速率较快。前面说了 栈是系统分配内存 ，而且有这FILO的出栈顺序 所以栈的内存速率快些。
堆 因为是程序员分配内存 ，而且是由C/C++函数库提供的。而且机制比较复杂，为了找打到一块合适大小的内存区域 会挨个遍历。所以耗时也就比较多些。
5.存储内容不同
栈在函数调用时，首先压入主调函数中下条指令(函数调用语句的下条可执行语句)的地址，然后是函数实参，然后是被调函数的局部变量。
本次调用结束后，局部变量先出栈，然后是参数，最后栈顶指针指向最开始存的指令地址，程序由该点继续运行下条可执行语句。
堆通常在头部用一个字节存放其大小，堆用于存储生存期与函数调用无关的数据，具体内容由程序员安排。
（其实我自己的理解是栈有自己的出栈方式FILO 所以局部调用结束后就直接出栈了，然后进行其他没出栈的操作处理。
而堆是先存需要的内存大小，然后后面的就交给创建者自己处理了）
6.分配方式不同
栈可静态分配或动态分配。静态分配由编译器完成，如局部变量的分配。动态分配由alloca函数在栈上申请空间，用完后自动释放。
堆只能动态分配且手工释放。(堆就好比OC语言里的MRC，而OC里的ARC就是苹果帮我们处理的MRC)
